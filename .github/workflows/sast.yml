name: Code Scanning

on:
  workflow_dispatch:
  workflow_call:

jobs:
  scan-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Detect Language
        id: detect-language
        run: |
          # Use a script to detect the programming language and store it in an environment variable.
          # Replace this with your language detection logic.
          detected_language="unknown"
      
          if [ -f "package.json" ] && [ -f "pages/index.js" ]; then
            detected_language="javascript (Next.js, React.js)"
          elif [ -f "angular.json" ] && [ -d "src/app" ]; then
            detected_language="javascript (Angular)"
          elif [ -f "Program.cs" ]; then
            detected_language="csharp"
          elif [ -f "pubspec.yaml" ]; then
            detected_language="dart"
          elif [ -f "pom.xml" ]; then
            detected_language="java"
          fi
      
          echo "DetectedLanguage=$detected_language" >> $GITHUB_ENV
          echo "DetectedLanguage: $detected_language"
        shell: bash
        
      - name: Code Scanning - Java
        if: ${{ env.detected_language }} == 'java'
        semgrep:
          needs: [SAST-CodeQL]
          # User-definable name of this GitHub Actions job:
          name: SAST Semgrep
          # If you are self-hosting, change the following `runs-on` value: 
          runs-on: ubuntu-latest
          permissions:
            actions: read
            contents: read
            security-events: write
          container:
            # A Docker image with Semgrep installed. Do not change this.
            image: returntocorp/semgrep
      
          # To skip any PR created by dependabot to avoid permission issues:
          if: (github.actor != 'dependabot[bot]')
      
          steps:
            # Fetch project source with GitHub Actions Checkout.
            - uses: actions/checkout@v3
            - run: semgrep ci -v -o results.sarif --sarif || true
              env:
                 # Add the rules that Semgrep uses by setting the SEMGREP_RULES environment variable. 
                 SEMGREP_RULES: p/default p/security-audit p/r2c-security-audit p/cwe-top-25 p/owasp-top-ten
                 # more at semgrep.dev/explore
                 # Uncomment SEMGREP_TIMEOUT to set this job's timeout (in seconds): Default timeout is 1800 seconds (30 minutes). 0=disable
                 # SEMGREP_TIMEOUT: 300
            - name: Upload Semgrep Report
              uses: actions/upload-artifact@v3.1.0
              if: always()
              with:
                name: semgrep.sarif
                path: ${{github.workspace}}/results.sarif
            - name: Upload analysis results to GitHub Security tab
              if: always()
              uses: github/codeql-action/upload-sarif@v2.1.28
              with:
                sarif_file: ${{github.workspace}}/results.sarif

      - name: Code Scanning - C#
        if: ${{ env.detected_language }} == 'csharp'
        run: |
          # Perform C# code scanning (replace with your code scanning command).
          echo "Performing C# code scanning..."
          # Example: Run Roslyn Analyzers or other C# static analysis tool
          dotnet analyze
        shell: bash

      - name: Code Scanning - Dart
        if: ${{ env.detected_language }} == 'dart'
        run: |
          # Perform Dart code scanning (replace with your code scanning command).
          echo "Performing Dart code scanning..."
          # Example: Run Dart static analysis tool
          dart analyze
        shell: bash

      - name: Code Scanning - JavaScript
        if: ${{ env.detected_language }} == 'javascript'
        run: |
          # Perform JavaScript code scanning (replace with your code scanning command).
          echo "Performing JavaScript code scanning..."
          # Example: Run ESLint or other JavaScript static analysis tool
          eslint .
        shell: bash
